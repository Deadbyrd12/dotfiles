diff --git a/mux/src/lib.rs b/mux/src/lib.rs
index 4f6b330f1..28d19db5c 100644
--- a/mux/src/lib.rs
+++ b/mux/src/lib.rs
@@ -69,6 +69,10 @@ pub enum MuxNotification {
         selection: ClipboardSelection,
         clipboard: Option<String>,
     },
+    QueryClipboard {
+        pane_id: PaneId,
+        selection: ClipboardSelection,
+    },
     SaveToDownloads {
         name: Option<String>,
         data: Arc<Vec<u8>>,
@@ -1425,6 +1429,20 @@ impl Clipboard for MuxClipboard {
         });
         Ok(())
     }
+
+    fn get_contents(
+        &self,
+        selection: ClipboardSelection,
+    ) -> anyhow::Result<()> {
+        log::warn!("Mux get content!!!!!!!!!!!!!!");
+        let mux =
+            Mux::try_get().ok_or_else(|| anyhow::anyhow!("MuxClipboard::set_contents: no Mux?"))?;
+        mux.notify(MuxNotification::QueryClipboard {
+            pane_id: self.pane_id,
+            selection,
+        });
+        Ok(())
+    }
 }
 
 struct MuxDownloader {}
diff --git a/term/src/terminal.rs b/term/src/terminal.rs
index 5adbf5b30..44fb63670 100644
--- a/term/src/terminal.rs
+++ b/term/src/terminal.rs
@@ -16,6 +16,11 @@ pub trait Clipboard: Send + Sync {
         selection: ClipboardSelection,
         data: Option<String>,
     ) -> anyhow::Result<()>;
+
+    fn get_contents(
+        &self,
+        selection: ClipboardSelection,
+    ) -> anyhow::Result<()>;
 }
 
 impl Clipboard for Box<dyn Clipboard> {
@@ -26,6 +31,13 @@ impl Clipboard for Box<dyn Clipboard> {
     ) -> anyhow::Result<()> {
         self.as_ref().set_contents(selection, data)
     }
+
+    fn get_contents(
+        &self,
+        selection: ClipboardSelection,
+    ) -> anyhow::Result<()> {
+        self.as_ref().get_contents(selection)
+    }
 }
 
 pub trait DeviceControlHandler: Send + Sync {
diff --git a/term/src/terminalstate/mod.rs b/term/src/terminalstate/mod.rs
index ada148039..233ad1d6a 100644
--- a/term/src/terminalstate/mod.rs
+++ b/term/src/terminalstate/mod.rs
@@ -712,6 +712,16 @@ impl TerminalState {
         Ok(())
     }
 
+    fn get_clipboard_contents<'a>(
+        &'a mut self,
+        selection: ClipboardSelection,
+    ) -> anyhow::Result<()> {
+        if let Some(clip) = self.clipboard.as_ref() {
+            clip.get_contents(selection)?;
+        }
+        Ok(())
+    }
+
     pub fn erase_scrollback_and_viewport(&mut self) {
         // Since we may be called outside of perform_actions,
         // we need to ensure that we increment the seqno in
diff --git a/term/src/terminalstate/performer.rs b/term/src/terminalstate/performer.rs
index 80f9d6dd2..959f24a81 100644
--- a/term/src/terminalstate/performer.rs
+++ b/term/src/terminalstate/performer.rs
@@ -767,7 +767,10 @@ impl<'a> Performer<'a> {
                 let selection = selection_to_selection(selection);
                 self.set_clipboard_contents(selection, None).ok();
             }
-            OperatingSystemCommand::QuerySelection(_) => {}
+            OperatingSystemCommand::QuerySelection(selection) => {
+                let selection = selection_to_selection(selection);
+                self.get_clipboard_contents(selection).ok();
+            }
             OperatingSystemCommand::SetSelection(selection, selection_data) => {
                 let selection = selection_to_selection(selection);
                 match self.set_clipboard_contents(selection, Some(selection_data)) {
diff --git a/wezterm-gui/src/frontend.rs b/wezterm-gui/src/frontend.rs
index bfbe1a7c9..526ddb268 100644
--- a/wezterm-gui/src/frontend.rs
+++ b/wezterm-gui/src/frontend.rs
@@ -200,6 +200,47 @@ impl GuiFrontEnd {
                     })
                     .detach();
                 }
+                MuxNotification::QueryClipboard {
+                    pane_id,
+                    selection,
+                } => {
+                    promise::spawn::spawn_into_main_thread(async move {
+                        let option = if let Some(window) = crate::frontend::front_end().known_windows.borrow().keys().next() {
+                            Some(window.clone())
+                        } else {
+                            log::error!("could not find window");
+                            None
+                        };
+                        log::trace!(
+                            "set clipboard in pane {} {:?}",
+                            pane_id,
+                            selection,
+                        );
+                        if let Some(window) = option {
+                            let future = window.get_clipboard(
+                                match selection {
+                                    ClipboardSelection::Clipboard => Clipboard::Clipboard,
+                                    ClipboardSelection::PrimarySelection => {
+                                        Clipboard::PrimarySelection
+                                    }
+                                },
+                            );
+                            if let Ok(clip) = future.await {
+                                let mux = Mux::get();
+                                if let Some(pane) = mux.get_pane(pane_id) {
+                                    write!(pane.writer(), "\x1b]52;c;dGVzdA==\x07").ok();
+                                    pane.writer().flush().ok();
+                                    //
+                                    // let writer = pane.writer().write("\x1b]52;c;dGVzdA==\x07".as_bytes());
+                                    log::warn!("Got the clip: {}", clip);
+                                }
+                            }
+                        } else {
+                            log::error!("Cannot assign clipboard as there are no windows");
+                        };
+                    })
+                    .detach();
+                }
             }
             true
         });
diff --git a/wezterm-gui/src/termwindow/mod.rs b/wezterm-gui/src/termwindow/mod.rs
index bd5d23adb..1f545e20f 100644
--- a/wezterm-gui/src/termwindow/mod.rs
+++ b/wezterm-gui/src/termwindow/mod.rs
@@ -1231,6 +1231,9 @@ impl TermWindow {
                 MuxNotification::AssignClipboard { .. } => {
                     // Handled by frontend
                 }
+                MuxNotification::QueryClipboard { .. } => {
+                    // Handled by frontend
+                }
                 MuxNotification::SaveToDownloads { .. } => {
                     // Handled by frontend
                 }
@@ -1441,6 +1444,7 @@ impl TermWindow {
                 ..
             }
             | MuxNotification::AssignClipboard { .. }
+            | MuxNotification::QueryClipboard { .. }
             | MuxNotification::SaveToDownloads { .. }
             | MuxNotification::WindowCreated(_)
             | MuxNotification::ActiveWorkspaceChanged(_)
diff --git a/wezterm-mux-server-impl/src/dispatch.rs b/wezterm-mux-server-impl/src/dispatch.rs
index da3b5b502..12936634f 100644
--- a/wezterm-mux-server-impl/src/dispatch.rs
+++ b/wezterm-mux-server-impl/src/dispatch.rs
@@ -139,6 +139,12 @@ where
                 .await?;
                 stream.flush().await.context("flushing PDU to client")?;
             }
+            Ok(Item::Notif(MuxNotification::QueryClipboard {
+                pane_id,
+                selection,
+            })) => {
+                log::error!("TODO Implement QueryClipboard in Mux-Server"); // TODO
+            }
             Ok(Item::Notif(MuxNotification::TabAddedToWindow { tab_id, window_id })) => {
                 Pdu::TabAddedToWindow(codec::TabAddedToWindow { tab_id, window_id })
                     .encode_async(&mut stream, 0)
